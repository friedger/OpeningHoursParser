/* Generated By:JavaCC: Do not edit this line. OpeningHoursParser.java */
package ch.poole.openinghoursparser;

import java.util.ArrayList;
import java.util.Collections;
import java.io.ByteArrayInputStream;

public class OpeningHoursParser implements OpeningHoursParserConstants {
  public static void main(String args []) throws ParseException
  {
    // test strings for running with debugging
    // String str = "1 02:00; 2014 Mar Th[1] ; 2014 Jan 25 03:00;";
    // String str = "12:01-13:02, 14:00 , 10:00-sunset , 11:01-45:00/45 ; 12-16 closed  ; Mo, We 12:01-13:02 ; Apr-Sep Tu-Th,Fr 10:01-13:03, Dec 13:03-21:01 ; week 01-22 10:11-14:14 ; 2014 Jan 2 03:00;";
    String str = "12:01-13:02, 14:00 , 10:00-sunset , 11:01-45:00/46 ; 12-16 closed \u005c"ein test\u005c" ; Mo, We 12:01-13:02 ; Apr-Sep 10:01-13:03, Dec 13:03-21:01";
    // String str = "closed \"ein test\" ;";
    // String str = "12:01-13:02, 14:00 , 10:00-sunset , 11:01-45:00/46 ; closed \"ein test\"";
    // String str = "Mo[1-4,5] 4:01-13:02";
    // String str = "PH +1 day 00:00-04:00 off";
    // String str = "Nov 16 12:00-17:00";
    // String str = "May 1: off";
    // String str = "Mo, We 12:01-13:02";
    // String str = "We-Mo 18:00+; Tu off || \"Ende offen (KÃ¼che bis 22 Uhr)\"";
    // String str = "We-Sa 20:00-06:00; Jun 8:00-14:00;";
    // String str = "We 16:00-20:00; Mar-Oct We 15:00-21:00, Th 18:00-21:00";
    // String str = "Mar-Oct We 15:00-21:00, Th 18:00-21:00";
    // String str = "We-Mo 08:00-24:00; \"Periodo invernale\": We-Mo 09:00-24:00; Tu closed";
    // String str = "We-Sa 10:00-22:00;";
    // String str = "10:00-22:00;";
    // String str = "2002-2010/2 We-Sa 10:00-22:00;";

    OpeningHoursParser parser = new OpeningHoursParser(new ByteArrayInputStream(str.getBytes()));
    ArrayList<Rule> rules = parser.rules();
    System.out.println("Parse result");
    for (Rule rl : rules)
    {
      System.out.println(rl.toString());
    }
    System.out.println();
    ArrayList<ArrayList<Rule>> r = Util.getMergeableRules(rules);
    System.out.println("Mergeable rules");
    for (ArrayList<Rule>r2:r)
    {
      boolean first = true;
      for (Rule r3 : r2)
      {
        System.out.print((!first ? (r3.replace?";":","):"") + r3.toString());
        first = false;
      }
      System.out.println();
    }
  }

/**
 * match a number between 1 and 5
 */
  final public Token one2five() throws ParseException {
  Token n = null;
    if (getToken(1).kind == NUMBER && Integer.parseInt(getToken(1).image) >= 1 && Integer.parseInt(getToken(1).image) <= 5) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    n = jj_consume_token(NUMBER);
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

/**
 * match a positive number larger than 1
 */
  final public Token number() throws ParseException {
  Token n = null;
    if (getToken(1).kind == NUMBER && Integer.parseInt(getToken(1).image) >= 1) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    n = jj_consume_token(NUMBER);
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

/**
 * Match a comment.
 */
  final public String comment() throws ParseException {
  StringBuilder builder = new StringBuilder();
    jj_consume_token(QUOTE);
    label_1:
    while (true) {
      if (jj_2_1(5)) {
        ;
      } else {
        break label_1;
      }
      getChar(builder);
    }
    jj_consume_token(ENDQUOTE);
    {if (true) return builder.toString();}
    throw new Error("Missing return statement in function");
  }

/**
 * Match char inside quoted string.
 */
  final public void getChar(StringBuilder builder) throws ParseException {
  Token t;
    t = jj_consume_token(CHAR);
    if (t.image.length() < 2)
    {
      // CHAR
      builder.append(t.image.charAt(0));
    }
  }

/**
 * returns a number if between 0 and 24
 * uses semantic lookahead
 */
  final public Token hours() throws ParseException {
  Token h = null;
    if (getToken(1).kind == NUMBER && Integer.parseInt(getToken(1).image) >= 0 && Integer.parseInt(getToken(1).image) <= 24) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    h = jj_consume_token(NUMBER);
    {if (true) return h;}
    throw new Error("Missing return statement in function");
  }

/**
 * returns the total number of minutes for a time of the form hh:00 or just hh 
 */
  final public int time() throws ParseException {
  Token h = null;
  Token m = null;
  int result = 0;
    h = hours();
    if (jj_2_2(5)) {
      m = jj_consume_token(MINUTES);
      result = Integer.parseInt(m.image.substring(1));
    } else {
      ;
    }
    result = result + Integer.parseInt(h.image) * 60;
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/**
 * time that requires minutes as per spec
 * currently not used
 */
  final public int strict_time() throws ParseException {
  Token h = null;
  Token m = null;
  int result = 0;
    h = hours();
    m = jj_consume_token(MINUTES);
      result = Integer.parseInt(m.image.substring(1));
    result = result + Integer.parseInt(h.image) * 60;
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/**
 * returns the total number of minutes for a time of the form hh:00 or just hh with hh up to 48 
 */
  final public int extendedtime() throws ParseException {
  Token h = null;
  Token m = null;
  int result = 0;
    if (getToken(1).kind == NUMBER && Integer.parseInt(getToken(1).image) >= 0 && Integer.parseInt(getToken(1).image) <= 48) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    h = jj_consume_token(NUMBER);
    if (jj_2_3(5)) {
      m = jj_consume_token(MINUTES);
      result = Integer.parseInt(m.image.substring(1));
    } else {
      ;
    }
    result = result + Integer.parseInt(h.image) * 60;
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public VariableTime variabletime() throws ParseException {
  Token event = null;
  Token sign = null;
  int offset = 0;
  VariableTime vt = new VariableTime();
    if (jj_2_6(5)) {
      event = jj_consume_token(EVENTS);
    vt.event = event.image;
    {if (true) return vt;}
    } else if (jj_2_7(5)) {
      jj_consume_token(27);
      event = jj_consume_token(EVENTS);
      if (jj_2_4(5)) {
        sign = jj_consume_token(PLUS);
      } else if (jj_2_5(5)) {
        sign = jj_consume_token(HYPHEN);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      offset = time();
      jj_consume_token(28);
      vt.event = event.image;
      vt.offset = (sign.image.equals("-") ? - 1 : 1) * offset;
    {if (true) return vt;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public int interval() throws ParseException {
  Token minutes = null;
  Token hours = null;
  int interval = 0;
    jj_consume_token(SLASH);
    if (jj_2_8(5)) {
      minutes = number();
        interval = Integer.parseInt(minutes.image);
    } else if (jj_2_9(5)) {
      hours = hours();
      minutes = jj_consume_token(MINUTES);
        interval = Integer.parseInt(hours.image) * 60 + Integer.parseInt(minutes.image.substring(1));
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return interval;}
    throw new Error("Missing return statement in function");
  }

  final public TimeSpan timespan() throws ParseException {
  int start = 0;
  int end =-1;
  Token startplus = null;
  Token endplus = null;
  VariableTime startVT = null;
  VariableTime endVT = null;
  TimeSpan ts = new TimeSpan();
  int inter = 0;
    if (jj_2_20(5)) {
      if (jj_2_10(5)) {
        start = time();
        ts.start = start;
      } else if (jj_2_11(5)) {
        startVT = variabletime();
        ts.startEvent = startVT;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_19(5)) {
        if (jj_2_17(5)) {
          startplus = jj_consume_token(PLUS);
        } else if (jj_2_18(5)) {
          jj_consume_token(HYPHEN);
          if (jj_2_12(5)) {
            end = extendedtime();
            ts.end = end;
          } else if (jj_2_13(5)) {
            endVT = variabletime();
            ts.endEvent = endVT;
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
          if (jj_2_16(5)) {
            if (jj_2_14(5)) {
              endplus = jj_consume_token(PLUS);
            } else if (jj_2_15(5)) {
              inter = interval();
              ts.interval = inter;
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
          } else {
            ;
          }
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
      ts.openEnded = startplus != null || endplus != null;
      {if (true) return ts;}
    } else if (jj_2_21(5)) {
      jj_consume_token(ALWAYS);
    ts.twentyfourseven = true;
    {if (true) return ts;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ArrayList < TimeSpan > time_selector() throws ParseException {
  TimeSpan ts, ts1;
  ArrayList < TimeSpan > result = new ArrayList < TimeSpan > ();
    ts = timespan();
    label_2:
    while (true) {
      if (jj_2_22(5)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(COMMA);
      ts1 = timespan();
        result.add(0, ts1);
    }
    result.add(ts);
    Collections.reverse(result);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public String weekday() throws ParseException {
  Token w = null;
    if (jj_2_23(5)) {
      w = jj_consume_token(WEEKDAY);
    {if (true) return w.image;}
    } else if (jj_2_24(5)) {
      w = jj_consume_token(WEEKDAY3);
      {if (true) return w.image.substring(0, 1);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// Mo-
// Mo-Fr
// Mo[1]
// Mo[1,3,5]
  final public WeekDayRange weekday_range() throws ParseException {
  String startDay = null;
  String endDay = null;
  Nth nth = null;
  Nth nth1 = null;
  WeekDayRange wdr = new WeekDayRange();
    startDay = weekday();
    if (jj_2_28(5)) {
      if (jj_2_26(5)) {
        jj_consume_token(HYPHEN);
        endDay = weekday();
          wdr.endDay = endDay;
      } else if (jj_2_27(5)) {
        jj_consume_token(29);
        nth = nth();
        label_3:
        while (true) {
          if (jj_2_25(5)) {
            ;
          } else {
            break label_3;
          }
          jj_consume_token(COMMA);
          nth1 = nth();
            wdr.nths.add(nth1);
        }
          wdr.nths.add(nth);
          Collections.reverse(wdr.nths);
        jj_consume_token(30);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    wdr.startDay = startDay;
    {if (true) return wdr;}
    throw new Error("Missing return statement in function");
  }

  final public Nth nth() throws ParseException {
  Nth n = new Nth();
  Token t1 = null;
  Token t2 = null;
    if (jj_2_29(5)) {
      t1 = one2five();
      n.startNth = Integer.parseInt(t1.image);
    } else {
      ;
    }
    if (jj_2_30(5)) {
      jj_consume_token(HYPHEN);
      t2 = one2five();
      n.endNth = Integer.parseInt(t2.image);
    } else {
      ;
    }
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList < WeekDayRange > weekday_selector() throws ParseException {
  WeekDayRange wdr, wdr1;
  ArrayList < WeekDayRange > result = new ArrayList < WeekDayRange > ();
    wdr = weekday_range();
    label_4:
    while (true) {
      if (jj_2_31(5)) {
        ;
      } else {
        break label_4;
      }
      jj_consume_token(COMMA);
      wdr1 = weekday_range();
      result.add(0, wdr1);
    }
    result.add(wdr);
    Collections.reverse(result);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Holiday holiday() throws ParseException {
  Token h = null;
  Token n = null;
  Token m = null;
  Holiday result = new Holiday();
    h = jj_consume_token(HOLIDAYS);
    if (jj_2_35(5)) {
      if (jj_2_32(5)) {
        m = jj_consume_token(HYPHEN);
      } else if (jj_2_33(5)) {
        jj_consume_token(PLUS);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      n = number();
      jj_consume_token(31);
      if (jj_2_34(5)) {
        jj_consume_token(32);
      } else {
        ;
      }
      result.offset = Integer.parseInt(n.image);
      if (m != null)
      {
        result.offset = result.offset * - 1;
      }
    } else {
      ;
    }
    result.type = Holiday.Type.valueOf(h.image.toUpperCase()); // the enum values are in upper case
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList < Holiday > holiday_sequence() throws ParseException {
  Holiday h = null;
  Holiday h1 = null;
  ArrayList < Holiday > result = new ArrayList < Holiday > ();
    h = holiday();
    label_5:
    while (true) {
      if (jj_2_36(5)) {
        ;
      } else {
        break label_5;
      }
      jj_consume_token(COMMA);
      h1 = holiday();
      result.add(0, h1);
    }
    result.add(h);
    Collections.reverse(result);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public String month() throws ParseException {
  Token m = null;
    m = jj_consume_token(MONTH);
    {if (true) return m.image;}
    throw new Error("Missing return statement in function");
  }

  final public MonthDayRange monthday_range() throws ParseException {
  Token nth = null;
  Token year = null;
  Token n = null;
  String startMonth = null;
  String endMonth = null;
  MonthDayRange mdr = new MonthDayRange();
  DateWithOffset startDate = null;
  DateWithOffset endDate = null;
  Token plus = null;
    startDate = datewithoffset();
    if (jj_2_37(5)) {
      plus = jj_consume_token(PLUS);
    } else {
      ;
    }
    mdr.startDate = startDate;
    startDate.openEnded = plus != null;
    if (jj_2_38(5)) {
      jj_consume_token(HYPHEN);
      endDate = datewithoffset();
        mdr.endDate = endDate;
    } else {
      ;
    }
    {if (true) return mdr;}
    throw new Error("Missing return statement in function");
  }

  final public int daynum() throws ParseException {
  Token n = null;
    if (getToken(1).kind == NUMBER && Integer.parseInt(getToken(1).image) >= 1 && Integer.parseInt(getToken(1).image) <= 31) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    n = jj_consume_token(NUMBER);
    {if (true) return Integer.parseInt(n.image);}
    throw new Error("Missing return statement in function");
  }

  final public int year() throws ParseException {
  Token n = null;
    if (getToken(1).kind == NUMBER && Integer.parseInt(getToken(1).image) >= 1900) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    n = jj_consume_token(NUMBER);
    {if (true) return Integer.parseInt(n.image);}
    throw new Error("Missing return statement in function");
  }

  final public DateWithOffset datewithoffset() throws ParseException {
  DateWithOffset dwo = new DateWithOffset();
  int y = 0;
  Token m = null;
  Token d = null;
  Token h = null;
  Token n = null;
  Token v = null;
  Token minus = null;
  Token num = null;
  Token wd = null;
    if (jj_2_39(5)) {
      y = year();
      dwo.year = y;
    } else {
      ;
    }
    if (jj_2_49(2147483647) && (getToken(2).kind != MINUTES && getToken(3).kind != MINUTES)) {
      if (jj_2_41(5)) {
        if (jj_2_40(5)) {
          m = jj_consume_token(MONTH);
            dwo.month = m.image;
        } else {
          ;
        }
        dwo.day = daynum();
      } else if (jj_2_42(5)) {
        v = jj_consume_token(VARDATE);
            dwo.varDate = v.image;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_45(5)) {
        if (jj_2_43(5)) {
          minus = jj_consume_token(HYPHEN);
        } else if (jj_2_44(5)) {
          jj_consume_token(PLUS);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        wd = jj_consume_token(WEEKDAY);
          dwo.weekDayOffsetPositive = minus == null;
          dwo.weekDayOffset = wd.image;
      } else {
        ;
      }
      if (jj_2_48(5)) {
        if (jj_2_46(5)) {
          minus = jj_consume_token(HYPHEN);
        } else if (jj_2_47(5)) {
          jj_consume_token(PLUS);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        num = number();
            dwo.dayOffset = Integer.parseInt(num.image) * (minus != null ? - 1 : 1);
      } else {
        ;
      }
    } else if (jj_2_50(5)) {
      m = jj_consume_token(MONTH);
      dwo.month = m.image;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return dwo;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList < MonthDayRange > monthday_selector() throws ParseException {
  MonthDayRange mdr, mdr1;
  ArrayList < MonthDayRange > result = new ArrayList < MonthDayRange > ();
    mdr = monthday_range();
    label_6:
    while (true) {
      if (jj_2_51(5)) {
        ;
      } else {
        break label_6;
      }
      jj_consume_token(COMMA);
      mdr1 = monthday_range();
      result.add(0, mdr1);
    }
    result.add(mdr);
    Collections.reverse(result);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public int weeknum() throws ParseException {
  Token n = null;
    if (getToken(1).kind == NUMBER && Integer.parseInt(getToken(1).image) >= 1 && Integer.parseInt(getToken(1).image) <= 54) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    n = jj_consume_token(NUMBER);
    {if (true) return Integer.parseInt(n.image);}
    throw new Error("Missing return statement in function");
  }

  final public WeekRange week_range() throws ParseException {
  WeekRange wr = new WeekRange();
  Token w = null;
  Token w1 = null;
    wr.startWeek = weeknum();
    if (jj_2_53(5)) {
      jj_consume_token(HYPHEN);
      wr.endWeek = weeknum();
      if (jj_2_52(5)) {
        wr.interval = interval();
      } else {
        ;
      }
    } else {
      ;
    }
    {if (true) return wr;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList < WeekRange > week_selector() throws ParseException {
  WeekRange wr, wr1;
  ArrayList < WeekRange > result = new ArrayList < WeekRange > ();
    jj_consume_token(33);
    wr = week_range();
    label_7:
    while (true) {
      if (jj_2_54(5)) {
        ;
      } else {
        break label_7;
      }
      jj_consume_token(COMMA);
      wr1 = week_range();
      result.add(0, wr1);
    }
    result.add(wr);
    Collections.reverse(result);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public YearRange year_range() throws ParseException {
  YearRange yr = new YearRange();
  Token y = null;
  Token y1 = null;
    yr.startYear = year();
    if (jj_2_56(5)) {
      jj_consume_token(HYPHEN);
      yr.endYear = year();
      if (jj_2_55(5)) {
        yr.interval = interval();
      } else {
        ;
      }
    } else {
      ;
    }
    {if (true) return yr;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList < YearRange > year_selector() throws ParseException {
  YearRange yr, yr1;
  ArrayList < YearRange > result = new ArrayList < YearRange > ();
    if (getToken(2).kind != MONTH  && getToken(2).kind != VARDATE) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    yr = year_range();
    label_8:
    while (true) {
      if (jj_2_57(5)) {
        ;
      } else {
        break label_8;
      }
      jj_consume_token(COMMA);
      yr1 = year_range();
      result.add(0, yr1);
    }
    result.add(yr);
    Collections.reverse(result);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public RuleModifier rule_modifier() throws ParseException {
  RuleModifier rm = new RuleModifier();
  Token m = null;
  String c = null;
    if (jj_2_58(5)) {
      m = jj_consume_token(MODIFIER);
    rm.modifier = m.image;
    } else {
      ;
    }
    if (jj_2_59(5)) {
      c = comment();
      rm.comment = c;
    } else {
      ;
    }
    {if (true) return rm;}
    throw new Error("Missing return statement in function");
  }

  final public Rule rule() throws ParseException {
  Rule r = null;
  String comment = null;
  ArrayList < YearRange > ys = null;
  ArrayList < WeekRange > ws = null;
  ArrayList < MonthDayRange > ms = null;
  ArrayList < Holiday > hs = null;
  ArrayList < WeekDayRange > ds = null;
  ArrayList < TimeSpan > ts = null;
  RuleModifier rm = null;
    if (jj_2_63(2147483647)) {
      comment = comment();
    } else {
      if (jj_2_60(5)) {
        ys = year_selector();
      } else {
        ;
      }
      if (jj_2_61(5)) {
        ws = week_selector();
      } else {
        ;
      }
      if (jj_2_62(5)) {
        ms = monthday_selector();
      } else {
        ;
      }
    }
    if (jj_2_64(5)) {
      jj_consume_token(COLON);
    } else {
      ;
    }
    if (jj_2_68(5)) {
      if (jj_2_66(5)) {
        hs = holiday_sequence();
      } else if (jj_2_67(5)) {
        hs = holiday_sequence();
        if (jj_2_65(5)) {
          jj_consume_token(COMMA);
        } else {
          ;
        }
        ds = weekday_selector();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    if (jj_2_69(5)) {
      ds = weekday_selector();
    } else {
      ;
    }
    if (jj_2_70(5)) {
      jj_consume_token(COLON);
    } else {
      ;
    }
    if (jj_2_71(5)) {
      ts = time_selector();
    } else {
      ;
    }
    rm = rule_modifier();
    r = new Rule();
    r.comment = comment;
    r.years = ys;
    r.weeks = ws;
    r.monthdays = ms;
    r.holidays = hs;
    r.days = ds;
    r.times = ts;
    r.modifier = rm;
    {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList < Rule > rules() throws ParseException {
  ArrayList < Rule > result = new ArrayList < Rule > ();
  Rule r = null;
  Rule r1 = null;
    r = rule();
    label_9:
    while (true) {
      if (jj_2_72(5)) {
        ;
      } else {
        break label_9;
      }
      if (jj_2_73(5)) {
        jj_consume_token(COMMA);
        r1 = rule();
          r1.replace = false;
          result.add(0, r1);
      } else if (jj_2_74(5)) {
        jj_consume_token(SEMICOLON);
        r1 = rule();
          r1.replace = true;
          result.add(0, r1);
      } else if (jj_2_75(5)) {
        jj_consume_token(FALLBACKSEPERATOR);
        r1 = rule();
          r1.replace = false;
          r1.fallBack = true;
          result.add(0, r1);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
    r.replace = true;
    result.add(r);
    Collections.reverse(result);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) return true;
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(EVENTS)) return true;
    return false;
  }

  private boolean jj_3_57() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    return false;
  }

  private boolean jj_3R_32() {
    jj_lookingAhead = true;
    jj_semLA = getToken(2).kind != MONTH  && getToken(2).kind != VARDATE;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_47()) return true;
    if (jj_3R_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_57()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(29)) return true;
    if (jj_3R_18()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_25()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(30)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    return false;
  }

  private boolean jj_3_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) return true;
    }
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(HYPHEN)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(MINUTES)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == NUMBER && Integer.parseInt(getToken(1).image) >= 1900;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_44()) return true;
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3_55() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_19()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_56() {
    if (jj_scan_token(HYPHEN)) return true;
    if (jj_3R_24()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_55()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_15() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == NUMBER && Integer.parseInt(getToken(1).image) >= 0 && Integer.parseInt(getToken(1).image) <= 48;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_41()) return true;
    if (jj_scan_token(NUMBER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_24()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_56()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == NUMBER && Integer.parseInt(getToken(1).image) >= 1 && Integer.parseInt(getToken(1).image) <= 31;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_45()) return true;
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(WEEKDAY3)) return true;
    return false;
  }

  private boolean jj_3_54() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(33)) return true;
    if (jj_3R_29()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_54()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) return true;
    }
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(WEEKDAY)) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_scan_token(HYPHEN)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_23()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_38()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_52() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_75() {
    if (jj_scan_token(FALLBACKSEPERATOR)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_53() {
    if (jj_scan_token(HYPHEN)) return true;
    if (jj_3R_28()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_52()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_28()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_53()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_46() {
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_17()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_22()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_74() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(MINUTES)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_3R_13()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_73() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_73()) {
    jj_scanpos = xsp;
    if (jj_3_74()) {
    jj_scanpos = xsp;
    if (jj_3_75()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_28() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == NUMBER && Integer.parseInt(getToken(1).image) >= 1 && Integer.parseInt(getToken(1).image) <= 54;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_46()) return true;
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(ALWAYS)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) return true;
    }
    return false;
  }

  private boolean jj_3_36() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == NUMBER && Integer.parseInt(getToken(1).image) >= 0 && Integer.parseInt(getToken(1).image) <= 24;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_40()) return true;
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3_65() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_36()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_51() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_27()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_51()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(HYPHEN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_16()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_scan_token(32)) return true;
    return false;
  }

  private boolean jj_3_71() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) return true;
    }
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3_70() {
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_scan_token(HYPHEN)) return true;
    return false;
  }

  private boolean jj_3_50() {
    if (jj_scan_token(MONTH)) return true;
    return false;
  }

  private boolean jj_3_69() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_47() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3_67() {
    if (jj_3R_35()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_65()) jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) return true;
    }
    if (jj_3R_12()) return true;
    if (jj_scan_token(31)) return true;
    xsp = jj_scanpos;
    if (jj_3_34()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_46() {
    if (jj_scan_token(HYPHEN)) return true;
    return false;
  }

  private boolean jj_3_66() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_66()) {
    jj_scanpos = xsp;
    if (jj_3_67()) return true;
    }
    return false;
  }

  private boolean jj_3_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) return true;
    }
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(HOLIDAYS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) return true;
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_19()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_62() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_64() {
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(QUOTE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ENDQUOTE)) return true;
    return false;
  }

  private boolean jj_3_61() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3_43() {
    if (jj_scan_token(HYPHEN)) return true;
    return false;
  }

  private boolean jj_3_60() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_63() {
    if (jj_3R_31()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    return false;
  }

  private boolean jj_3_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) return true;
    }
    if (jj_scan_token(WEEKDAY)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_60()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_61()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_62()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_42() {
    if (jj_scan_token(VARDATE)) return true;
    return false;
  }

  private boolean jj_3R_12() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == NUMBER && Integer.parseInt(getToken(1).image) >= 1;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_39()) return true;
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_64()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_68()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_69()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_70()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_71()) jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_21()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_31()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_13()) return true;
    if (jj_scan_token(MINUTES)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == NUMBER && Integer.parseInt(getToken(1).image) >= 1 && Integer.parseInt(getToken(1).image) <= 5;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_42()) return true;
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(SLASH)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) return true;
    }
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(HYPHEN)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_scan_token(MONTH)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(22)) jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) return true;
    }
    return false;
  }

  private boolean jj_3_29() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_59() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_40()) jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_58() {
    if (jj_scan_token(MODIFIER)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_58()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_59()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_45()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_48()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(HYPHEN)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(27)) return true;
    if (jj_scan_token(EVENTS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) return true;
    }
    if (jj_3R_11()) return true;
    if (jj_scan_token(28)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = getToken(2).kind != MINUTES && getToken(3).kind != MINUTES;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3_50()) return true;
    }
    return false;
  }

  private boolean jj_3R_47() {
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public OpeningHoursParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[75];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public OpeningHoursParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public OpeningHoursParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new OpeningHoursParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public OpeningHoursParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new OpeningHoursParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public OpeningHoursParser(OpeningHoursParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(OpeningHoursParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[34];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 34; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 75; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
